<?php

/**
 * This file is auto-generated by Saloon SDK Generator
 * Generator: ShipStream\FedEx\Generator\Generators\RequestGenerator
 * Do not modify it directly.
 */

declare(strict_types=1);

namespace ShipStream\FedEx\Api\TradeDocumentsUploadV1\Requests;

use Exception;
use Saloon\Contracts\Body\HasBody;
use Saloon\Enums\Method;
use Saloon\Http\Response;
use Saloon\Traits\Body\HasJsonBody;
use ShipStream\FedEx\Api\TradeDocumentsUploadV1\Dto\FullSchemaBase64multiDocumentRequest;
use ShipStream\FedEx\Api\TradeDocumentsUploadV1\Responses\ErrorResponseVo;
use ShipStream\FedEx\Api\TradeDocumentsUploadV1\Responses\ErrorResponseVo2;
use ShipStream\FedEx\Api\TradeDocumentsUploadV1\Responses\ErrorResponseVo3;
use ShipStream\FedEx\Api\TradeDocumentsUploadV1\Responses\MultiBasePreResponse2;
use ShipStream\FedEx\Request;

/**
 * UploadMultiEncodedETDfiles
 *
 * Use this endpoint to upload multiple trade documents as base64 electronically before (pre-shipment)
 * and after (post-shipment) the shipment is created
 */
class UploadMultiEncodedEtDfiles extends Request implements HasBody
{
    use HasJsonBody;

    protected Method $method = Method::POST;

    /**
     * @param  FullSchemaBase64multiDocumentRequest  $fullSchemaBase64multiDocumentRequest  Provide all the documents' details and shipment meta data
     */
    public function __construct(
        public FullSchemaBase64multiDocumentRequest $fullSchemaBase64multiDocumentRequest,
    ) {}

    public function resolveEndpoint(): string
    {
        return '/documents/v1/etds/encodedmultiupload';
    }

    public function createDtoFromResponse(
        Response $response,
    ): MultiBasePreResponse2|ErrorResponseVo2|ErrorResponseVo3|ErrorResponseVo {
        $status = $response->status();
        $responseCls = match ($status) {
            201 => MultiBasePreResponse2::class,
            400 => ErrorResponseVo2::class,
            401, 403, 500, 503 => ErrorResponseVo3::class,
            404 => ErrorResponseVo::class,
            default => throw new Exception("Unhandled response status: {$status}")
        };

        return $responseCls::deserialize($response->json());
    }

    public function defaultBody(): array
    {
        return $this->fullSchemaBase64multiDocumentRequest->toArray();
    }
}
