<?php

/**
 * This file is auto-generated by Saloon SDK Generator
 * Generator: ShipStream\FedEx\Generator\Generators\RequestGenerator
 * Do not modify it directly.
 */

declare(strict_types=1);

namespace ShipStream\FedEx\Api\TradeDocumentsUploadV1\Requests;

use Exception;
use Saloon\Contracts\Body\HasBody;
use Saloon\Data\MultipartValue;
use Saloon\Enums\Method;
use Saloon\Http\Response;
use Saloon\Traits\Body\HasMultipartBody;
use ShipStream\FedEx\Api\TradeDocumentsUploadV1\Dto\FullSchemaMultiDocumentRequest;
use ShipStream\FedEx\Api\TradeDocumentsUploadV1\Responses\ErrorResponseVo;
use ShipStream\FedEx\Api\TradeDocumentsUploadV1\Responses\ErrorResponseVo2;
use ShipStream\FedEx\Api\TradeDocumentsUploadV1\Responses\ErrorResponseVo3;
use ShipStream\FedEx\Api\TradeDocumentsUploadV1\Responses\MultiBasePreResponse;
use ShipStream\FedEx\Request;

/**
 * UploadMultiETDfiles
 *
 * Use this endpoint to upload multiple trade documents electronically before (pre-shipment) and after
 * (post-shipment) the shipment is created
 */
class UploadMultiEtDfiles extends Request implements HasBody
{
    use HasMultipartBody;

    protected Method $method = Method::POST;

    public function __construct(
        public FullSchemaMultiDocumentRequest $fullSchemaMultiDocumentRequest,
    ) {}

    public function resolveEndpoint(): string
    {
        return '/documents/v1/etds/multiupload';
    }

    public function createDtoFromResponse(
        Response $response,
    ): MultiBasePreResponse|ErrorResponseVo2|ErrorResponseVo3|ErrorResponseVo {
        $status = $response->status();
        $responseCls = match ($status) {
            201 => MultiBasePreResponse::class,
            400 => ErrorResponseVo2::class,
            401, 403, 500, 503 => ErrorResponseVo3::class,
            404 => ErrorResponseVo::class,
            default => throw new Exception("Unhandled response status: {$status}")
        };

        return $responseCls::deserialize($response->json());
    }

    public function defaultBody(): array
    {
        $data = $this->fullSchemaMultiDocumentRequest->toArray();
        $multipart = [];
        foreach ($data as $key => $value) {
            if (is_string($value) || is_numeric($value)) {
                $multipart[] = new MultipartValue($key, (string) $value);
            } else {
                $multipart[] = new MultipartValue($key, json_encode($value));
            }
        }

        return $multipart;
    }
}
