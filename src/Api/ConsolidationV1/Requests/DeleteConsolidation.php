<?php

/**
 * This file is auto-generated by Saloon SDK Generator
 * Generator: ShipStream\FedEx\Generator\Generators\RequestGenerator
 * Do not modify it directly.
 */

declare(strict_types=1);

namespace ShipStream\FedEx\Api\ConsolidationV1\Requests;

use Exception;
use Saloon\Contracts\Body\HasBody;
use Saloon\Enums\Method;
use Saloon\Http\Response;
use Saloon\Traits\Body\HasJsonBody;
use ShipStream\FedEx\Api\ConsolidationV1\Dto\FullSchemaDeleteConsolidation;
use ShipStream\FedEx\Api\ConsolidationV1\Responses\DeleteConsolidationResponse;
use ShipStream\FedEx\Api\ConsolidationV1\Responses\ErrorResponseVo;
use ShipStream\FedEx\Api\ConsolidationV1\Responses\ErrorResponseVo2;
use ShipStream\FedEx\Request;

/**
 * Delete Consolidation
 *
 * Delete Consolidation endpoint is intended to delete a new consolidation request with preliminary
 * information ( Shipper, recipient, origin info etc.,) so that the customers can consolidate their
 * shipments.
 */
class DeleteConsolidation extends Request implements HasBody
{
    use HasJsonBody;

    protected Method $method = Method::PUT;

    /**
     * @param  FullSchemaDeleteConsolidation  $fullSchemaDeleteConsolidation  The request elements required to delete a consolidation.
     */
    public function __construct(
        public FullSchemaDeleteConsolidation $fullSchemaDeleteConsolidation,
    ) {}

    public function resolveEndpoint(): string
    {
        return '/ship/v1/consolidations/delete';
    }

    public function createDtoFromResponse(
        Response $response,
    ): DeleteConsolidationResponse|ErrorResponseVo|ErrorResponseVo2 {
        $status = $response->status();
        $responseCls = match ($status) {
            200 => DeleteConsolidationResponse::class,
            400, 500 => ErrorResponseVo::class,
            401, 403, 404, 503 => ErrorResponseVo2::class,
            default => throw new Exception("Unhandled response status: {$status}")
        };

        return $responseCls::deserialize($response->json());
    }

    public function defaultBody(): array
    {
        return $this->fullSchemaDeleteConsolidation->toArray();
    }
}
